######################################################################
# NewFileHere
#
# Create an empty TXT file
# * On click create a new text file (txt) in
#		* a. The frontmost Finder Window
#		* b. A custom location (User can select another folder)
# * Default filename: NewFile <YYYY-MM-dd_HHMMss>.txt
# * User can select to automatically paste the current clipboard content into the newly created file
#
#
#
# 2015-07-12
# Timo Kahle
#
# Changes
#
# v1.0.0 (2015-06-03)
# o Initial version
#
# v1.1.0 (2015-07-12)
# o Refactored whole app
#
#
# ToDo
#
# + Refactor
# + Add option to define default location (plist)
# + Add option to open the created file with the default application
#
#
######################################################################

# Environment
property APP_ICON : "applet.icns"
property APP_NAME : "NewFileHere"
property APP_VERSION : "1.1.0"
property TIMEOUT_SEC : 3600 -- 60 minutes

# Environment
property MIN_OS_VERSION : "10.9"

# UI texts
property APP_DETAILS : APP_NAME & " " & APP_VERSION
property DLG_TITLE_ERROR : "ERROR"
property DLG_MSG_ERROR : "An error occurred."
property DLG_MSG_OS_UNSUPPORTED : "Your OS X version is not supported. You need at least OS X 10.9 to use this app."
property DLG_MSG_ENTER_TITLE : "Enter a filename."
property DLG_MSG_SELECT_FOLDER : "Select a folder where to save the new file."
property BTN_OK : "OK"
property BTN_CANCEL : "CANCEL"
property BTN_CREATE : "CREATE"
property BTN_CREATE_HERE : "CREATE HERE"
property BTN_CREATE_OTHER : "OTHER FOLDER"
property FILENAME_PREFIX : "NewFile_"
property FILENAME_EXTENSION : ".txt"


# Applet
on run
	set dlgIcon to (path to resource APP_ICON)
	set theFolderPath to ""
	set theNewFile to ""

	# Check minimum supported OS X version
	if IsValidMinOS(MIN_OS_VERSION) is false then
		# Handle non-supported OS
		display dialog DLG_MSG_OS_UNSUPPORTED with title DLG_TITLE_ERROR buttons {BTN_OK} default button {BTN_OK} cancel button {BTN_OK} with icon dlgIcon
		return
	end if


	# Define the default filename
	set theFileNameDefault to FILENAME_PREFIX & GetFormattedTimestamp() & FILENAME_EXTENSION


	# Get the path to the frontmost Finder window if exists or ask the user for a folder
	tell application "Finder"
		if exists Finder window 1 then
			# Initialize the paths
			set theFolderPath to POSIX path of (target of front Finder window as text)
		else
			# Ask the user where to store the file (choose folder)
			set askForFolder to (choose folder with prompt DLG_MSG_SELECT_FOLDER)
			set theFolderPath to POSIX path of (askForFolder)
		end if
	end tell


	# Ask the user for the filetype to be created
	# We're skipping this section here as this always creates TXT files

	# Ask the user for the filename
	set theFileName to (display dialog "Create file at: " & theFolderPath & return & return & DLG_MSG_ENTER_TITLE default answer theFileNameDefault buttons {BTN_CANCEL, BTN_CREATE_OTHER, BTN_CREATE} default button {BTN_CREATE} with icon dlgIcon cancel button {BTN_CANCEL})

	# Get the users selection
	set theFileName_Selected to text returned of theFileName
	set theAnswerButton to button returned of the theFileName

	# User selected to use the selected folder
	if theAnswerButton is BTN_CREATE then
		set theNewFile to quoted form of (theFolderPath & theFileName_Selected)
	end if

	# User selected to use another target folder
	if theAnswerButton is BTN_CREATE_OTHER then
		# Ask for other folder
		set askForFolder to (choose folder with prompt DLG_MSG_SELECT_FOLDER)
		set theFolderPath to POSIX path of (askForFolder)

		# Ask the user for the filename
		set theFileName to (display dialog "Create file at: " & theFolderPath & return & return & DLG_MSG_ENTER_TITLE default answer theFileNameDefault buttons {BTN_CANCEL, BTN_CREATE} default button {BTN_CREATE} with icon dlgIcon cancel button {BTN_CANCEL})

		# Get the users selection
		set theFileName_Selected to text returned of theFileName
		set theNewFile to quoted form of (theFolderPath & theFileName_Selected)
	end if


	# Create the file
	set theFileCreated to (do shell script "touch " & theNewFile)
	# Check for errors
	if theFileCreated > 0 then
		# An error occurred
		if SupportsNotificationCenter() is true then
			# Message in Notification Center
			display notification DLG_MSG_ERROR with title DLG_TITLE_ERROR
		else
			display dialog DLG_MSG_ERROR with title DLG_TITLE_ERROR buttons {"OK"} default button {"OK"} with icon dlgIcon
		end if
	end if

end run

######################################################################
######################################################################


# Check if minimum required OS X version is running
on IsValidMinOS(minVersion)
	set strOSXVersion to system version of (system info)
	considering numeric strings
		#set IsMavericks to strOSXVersion ≥ "10.9"
		set IsSupportedMinOS to strOSXVersion is greater than or equal to minVersion
	end considering

	return IsSupportedMinOS
end IsValidMinOS


# Check if minimum required OS X version is running
on IsMinOS109()
	set strOSXVersion to system version of (system info)
	considering numeric strings
		#set IsMavericks to strOSXVersion ≥ "10.9"
		set IsSupportedMinOS to strOSXVersion is greater than or equal to "10.9"
	end considering

	return IsSupportedMinOS
end IsMinOS109


# Check if native AppleScript Progress is supported (min. Yosemite, 10.10)
on SupportsNativeProgress()
	set strOSXVersion to system version of (system info)
	considering numeric strings
		#set IsMavericks to strOSXVersion ≥ "10.10"
		set IsSupportedMinOS to strOSXVersion is greater than or equal to "10.10"
	end considering

	return IsSupportedMinOS
end SupportsNativeProgress


# Check if Notification Center is supported (min. Mavericks 10.9)
on SupportsNotificationCenter()
	set strOSXVersion to system version of (system info)
	considering numeric strings
		#set IsMavericks to strOSXVersion ≥ "10.9"
		set IsSupportedMinOS to strOSXVersion is greater than or equal to "10.9"
	end considering

	return IsSupportedMinOS
end SupportsNotificationCenter



# Retrieve the OS X version
on GetOSXVersion()
	set os_version to do shell script "sw_vers -productVersion"
	return os_version as text
end GetOSXVersion



# Get formatted date/time stamp
on GetFormattedTimestamp()
	set dtStamp to do shell script ("date \"+%Y-%m-%d_%H%M%S\"")
	return dtStamp as string
end GetFormattedTimestamp
